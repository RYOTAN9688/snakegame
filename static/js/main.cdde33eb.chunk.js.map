{"version":3,"sources":["component/Navigation.jsx","component/Field.jsx","component/Button.jsx","component/ManipulationPanel.jsx","utils/index.js","App.js","index.js"],"names":["Navigation","length","difficulty","onChangeDifficulty","upVisibility","downVisibility","className","onClick","Field","fields","map","row","column","Button","status","onStart","onStop","onRestart","ManipulationPanel","onChange","icon","faArrowLeft","faArrowUp","faArrowDown","faArrowRight","getFoodPosition","fieldSize","excludes","x","Math","floor","random","y","some","item","initFields","snake","i","cols","Array","fill","push","food","initialPosition","initialValues","Difficulty","GameStatus","Object","freeze","init","playing","suspended","gameover","Direction","up","right","left","down","DirectionKeyCodeMap","37","38","39","40","oppositeDirection","Delta","timer","undefined","unsubscribe","clearInterval","App","useState","setFields","body","setBody","setStatus","tick","setTick","direction","setDirection","setDifficulty","useEffect","setInterval","handleMoving","onChangeDirection","useCallback","newDirection","handleKeyDown","e","keyCode","document","addEventListener","removeEventListener","position","delta","newPosition","isEatingMyself","newBody","removingTrack","pop","unshift","ReactDom","render","getElementById"],"mappings":"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","file":"static/js/main.cdde33eb.chunk.js","sourcesContent":["import React from 'react';\n\nconst Navigation = ({ length, difficulty = 3, onChangeDifficulty }) => {\n    const upVisibility = difficulty < 5 ? \"\" : \"is-hidden\"\n    const downVisibility = difficulty > 1 ? \"\" : \"is-hidden\"\n    const onUpDifficulty = () => onChangeDifficulty(difficulty + 1)\n    const onDownDifficulty = () => onChangeDifficulty(difficulty - 1)\n\n    return (\n        <div className=\"navigation\">\n            <div className=\"navigation-item\">\n                <span className=\"navigation-label\">Length:</span>\n                <div className=\"navigation-item-number-container\">\n                    <div className=\"num-board\">{length}</div>\n                </div>\n            </div>\n            <div className=\"navigation-item\">\n                <span className=\"navigation-label\">Difficulty</span>\n                <div className=\"navigation-item-number-container\">\n                    <div className=\"num-board\">{difficulty}</div>\n                    <div className=\"difficulty-button-container\">\n                        <div\n                            className={`difficulty-button difficulty-up ${upVisibility}`}\n                            onClick={onUpDifficulty}>\n                        </div>\n                        <div\n                            className={`difficulty-button difficulty-down ${downVisibility}`}\n                            onClick={onDownDifficulty}>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        </div >\n\n    )\n}\n\nexport default Navigation;","import React from \"react\";\n\nconst Field = ({ fields }) => {\n    return (\n        <div className=\"field\">\n            {\n                fields.map((row) => {\n                    return row.map((column) => {\n                        return <div className={`dots ${column}`}></div>\n                    })\n                })\n                //fill関数:全ての配列の中身を引数に与えられた値（”\"空文字）で初期化できる\n            }\n        </div>\n    );\n};\n\nexport default Field;\n","import React from 'react';\n\n\nconst Button = ({ status, onStart, onStop, onRestart }) => {\n    return (\n        <div className=\"button\">\n            {status === \"gameover\" && <button className=\"btn btn-gameover\" onClick={onRestart}>gameover</button>}\n            {status === \"init\" && <button className=\"btn btn-init\" onClick={onStart}>start </button>}\n            {status === \"suspended\" && <button className=\"btn btn-suspended\" onClick={onStart}>start</button>}\n            {status === \"playing\" && <button className=\"btn btn-playing\" onClick={onStop}>stop</button>}\n\n\n        </div>\n    );\n}\n\nexport default Button;","import React from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faArrowLeft, faArrowUp, faArrowDown, faArrowRight } from '@fortawesome/free-solid-svg-icons';\n\nconst ManipulationPanel = ({ onChange }) => {\n    const onUp = () => onChange(\"up\")\n    const onRight = () => onChange(\"right\")\n    const onLeft = () => onChange(\"left\")\n    const onDown = () => onChange(\"down\")\n\n    return (\n        <div className=\"manipulation-panel\">\n            <button className=\"manipulation-btn btn btn-left\" onClick={onLeft}>\n                <FontAwesomeIcon icon={faArrowLeft} />\n            </button>\n            <div>\n                <button className=\"manipulation-btn btn btn-up\" onClick={onUp}>\n                    <FontAwesomeIcon icon={faArrowUp} />\n                </button>\n                <button className=\"manipulation-btn btn btn-down\" onClick={onDown}>\n                    <FontAwesomeIcon icon={faArrowDown} />\n                </button>\n            </div>\n            <button className=\"manipulation-btn btn btn-right\" onClick={onRight}>\n                <FontAwesomeIcon icon={faArrowRight} />\n            </button>\n        </div>\n    );\n};\n\nexport default ManipulationPanel;","import React from 'react';\n\nexport const getFoodPosition = (fieldSize, excludes) => {\n    while (true) {\n        const x = Math.floor(Math.random() * (fieldSize - 1 - 1)) + 1;\n        const y = Math.floor(Math.random() * (fieldSize - 1 - 1)) + 1;\n        const conflict = excludes.some(item => item.x === x && item.y === y)\n        //callbackでsnakeの配列が渡され、ランダムに取得された座標が排除リストにあるかをチェックする\n        if (!conflict) {\n            return { x, y };\n        }\n    }\n}\n\n\n\nexport const initFields = (fieldSize, snake) => {\n\n    const fields = []\n    for (let i = 0; i < fieldSize; i++) {\n        const cols = new Array(fieldSize).fill(\"\")\n        fields.push(cols)\n    }\n    fields[snake.y][snake.x] = 'snake'\n\n    const food = getFoodPosition(fieldSize, [snake])\n    fields[food.y][food.x] = \"food\"\n\n    return fields\n}","import React, { useState, useEffect, useCallback } from 'react';\n\nimport Navigation from './component/Navigation';\nimport Field from './component/Field';\nimport Button from './component/Button';\nimport ManipulationPanel from './component/ManipulationPanel';\nimport \"./index.css\"\nimport { initFields, getFoodPosition } from './utils';\n\n\nconst initialPosition = { x: 17, y: 17 }\nconst initialValues = initFields(35, initialPosition)\nconst defaultInterval = 100\nconst defaultDifficulty = 3\n\nconst Difficulty = [1000, 500, 100, 50, 10]\n//ゲームのステータスを一元管理する\nconst GameStatus = Object.freeze({//オブジェクトを凍結させる（プロパティの追加などが行えなくなる）\n    init: 'init',\n    playing: 'playing',\n    suspended: 'suspended',\n    gameover: 'gameover',\n});\n\nconst Direction = Object.freeze({\n    up: \"up\",\n    right: \"right\",\n    left: \"left\",\n    down: \"down\",\n\n})\nconst DirectionKeyCodeMap = Object.freeze({\n    37: Direction.left,\n    38: Direction.up,\n    39: Direction.right,\n    40: Direction.down,\n})\n\nconst oppositeDirection = Object.freeze({\n    up: \"down\",\n    right: \"left\",\n    left: \"right\",\n    down: \"up\",\n})\n\nconst Delta = Object.freeze({\n    up: { x: 0, y: -1 },\n    right: { x: 1, y: 0 },\n    left: { x: -1, y: 0 },\n    down: { x: 0, y: 1 },\n})\n\nlet timer = undefined;//タイマーを繰り返し、セット・削除する必要があるためletで宣言\n\nconst unsubscribe = () => {//コンポーネントが削除される時に実行する関数\n    if (!timer) {\n        return;\n    }\n    clearInterval(timer)\n\n}\n//unsubscribe=解除、削除\n\n//衝突したときを判断する条件（x,yの値がマイナスの値で、フィールドサイズより小さい座標に収まっていない場合）\nconst isCollision = (fieldSize, position) => {\n    //x.y座標のどちらかが0より小さいか＝（フィールドをはみ出している）をチェック\n    if (position.y < 0 || position.x < 0) {\n        return true;\n    }\n    //x,y座標がフィールドより大きくなってしまった場合をチェック（fieldSize -1 は座標データが0始まりのため）\n    if (position.y > fieldSize - 1 || position.x > fieldSize - 1) {\n        return true;\n    }\n    return false;\n\n};\n\nconst isEatingMyself = (fields, position) => {//自分を食べてしまった場合の処理\n    return fields[position.y][position.x] === \"snake\"\n}\n\n\nconst App = () => {\n    const [fields, setFields] = useState(initialValues)\n    // const [position, setPosition] = useState()\n    const [body, setBody] = useState([])\n    const [status, setStatus] = useState(GameStatus.init)//スタータスは文字列で管理するため初期値initを登録する\n    const [tick, setTick] = useState(0)\n    const [direction, setDirection] = useState(Direction.up)\n    const [difficulty, setDifficulty] = useState(defaultDifficulty)\n\n\n\n    useEffect(() => {//初回レンダリング時だけ初期化を実施する（useEffect)を使用する\n        setBody([initialPosition])\n        //ゲームの中の時間を管理する\n        const interval = Difficulty[difficulty - 1]\n        timer = setInterval(() => {\n            setTick(tick => tick + 1)\n        }, interval)\n        return unsubscribe\n    }, [difficulty])//コンポーネントが削除される際にタイマーも削除される\n\n    useEffect(() => {\n        //ゲームがプレイ中でない限りスネークが動かないようにする\n        if (body.length === 0 || status !== GameStatus.playing) {\n            return;//関数の実行を終了する、\n        }\n        //goUp関数をスネークが移動した後にゲームを続けられる状態か返すように変更\n        //続けることができない時にゲームオーバーの処理をかける\n        const canCoutinue = handleMoving()\n        if (!canCoutinue) {\n            setStatus(GameStatus.gameover)\n        }\n    }, [tick])\n\n    const onStart = () => setStatus(GameStatus.playing)\n\n    const onStop = () => setStatus(GameStatus.suspended)\n\n    const onRestart = () => {\n        timer = setInterval(() => {\n            setTick(tick => tick + 1)\n        }, defaultInterval);\n        setStatus(GameStatus.init)\n        setBody([initialPosition])\n        setDirection(Direction.up)\n        setFields(initFields(35, initialPosition))\n\n    }\n    //操作パネルで方向を変える\n    const onChangeDirection = useCallback((newDirection) => {\n        if (status !== GameStatus.playing) {\n            return direction;\n        }\n        if (oppositeDirection[direction] === newDirection) {\n            return;\n        }\n        setDirection(newDirection);\n    }, [direction, status]);\n\n\n    const onChangeDifficulty = useCallback((difficulty) => {\n        if (status !== GameStatus.init) {//ゲームを始める前以外は変更できない\n            return;\n        }\n        if (difficulty < 1 || difficulty > Difficulty.length) {\n            return;\n        }\n        setDifficulty(difficulty)\n    }, [status, difficulty])\n\n    //usecallback 配列で渡してあげた状態が変わらない限り、関数が再生成されないようにする\n\n\n    useEffect(() => {\n        const handleKeyDown = (e) => {\n            const newDirection = DirectionKeyCodeMap[e.keyCode];//e.keyDode押したキーコードを取得\n            if (!newDirection) {\n                return;\n            }\n            onChangeDirection(newDirection);\n        };\n        document.addEventListener(\"keydown\", handleKeyDown)//任意のキーを押したとき、handleKeyDown関数を実行\n        return () => document.removeEventListener(\"keydown\", handleKeyDown)\n    }, [onChangeDirection])\n\n    const handleMoving = () => {\n        //フィールドの新しい座標を取得\n        const { x, y } = body[0]\n\n        //常に壁にぶつかったかどうかを確認する\n        //新しいポジションがフィールド外であることがわかった場合、ステート\n        //の更新せず、falseを返す\n        const delta = Delta[direction]//今の方向による座標の変化量を取得\n        const newPosition = {\n            x: x + delta.x,\n            y: y + delta.y,\n        }\n        if (isCollision(fields.length, newPosition) || isEatingMyself(fields, newPosition)) {\n            unsubscribe()\n            return false;\n        }\n\n        //スネークの元いた位置を空にする\n        const newBody = [...body]\n        if (fields[newPosition.y][newPosition.x] !== \"food\") {//スネークが餌を食べない場合\n            const removingTrack = newBody.pop()//bodyの末尾のポジションを抜き出す\n            fields[removingTrack.y][removingTrack.x] = \"\" //そのポジションを空文字でリセットする\n        } else {//スネークが餌を食べた場合、餌を再度出現させる\n            const food = getFoodPosition(fields.length, [newBody, newPosition])\n            fields[food.y][food.x] = \"food\"\n        }\n\n\n        fields[newPosition.y][newPosition.x] = \"snake\"\n        newBody.unshift(newPosition)\n        setBody(newBody)\n        //fieldを更新する\n        setFields(fields)\n        return true;\n    }\n\n    //GoUpでは元の変数の値を書き換えている（破壊的変更）がsetPotisionで\n    //レンダリングをトリガ―（何かをやるきっかけ）できるため破壊的変更を許容している\n\n    return (\n        <div className=\"App\">\n            <header className=\"header\">\n                <div className=\"title-container\">\n                    <h1 className=\"title\">Snake Game</h1>\n                </div>\n                <Navigation\n                    length={body.length}\n                    difficulty={difficulty}\n                    onChangeDifficulty={onChangeDifficulty} />\n            </header>\n\n            <main className=\"main\">\n                <Field fields={fields} />\n            </main>\n\n\n            <footer className=\"footer\">\n                <Button\n                    status={status}\n                    onStart={onStart}\n                    onStop={onStop}\n                    onRestart={onRestart} />\n                <ManipulationPanel onChange={onChangeDirection} />\n            </footer>\n        </div >\n    )\n}\n\n\nexport default App;","import React from 'react';\nimport ReactDom from 'react-dom';\nimport App from './App';\n\n\nReactDom.render(\n    <App />, document.getElementById('root')\n)"],"sourceRoot":""}